import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# === –ó–∞–≥—Ä—É–∂–∞–µ–º Excel ===
file_path = "12_sfer_zhizni.xlsx"  # –ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º
df = pd.read_excel(file_path)

st.title("–ö–æ–ª–µ—Å–æ –ñ–∏–∑–Ω–∏ üåç")
st.markdown("–í—ã—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1 –¥–æ 6 –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥—Å—Ñ–µ—Ä—ã, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞.")

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è ===
sliders = {}

for sphere in df.columns:
    st.subheader(sphere)
    subs = df[sphere].dropna().tolist()
    sliders[sphere] = []
    for i, sub in enumerate(subs):
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–µ—Ä–∞
        unique_key = f"{sphere}_{sub}_{i}"
        val = st.slider(
            f"{sub}",
            min_value=1,
            max_value=6,
            value=3,
            step=1,
            key=unique_key  # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        )
        sliders[sphere].append((sub, val))

# === –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞ ===
if st.button("–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–µ—Å–æ"):
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Å—Ñ–µ—Ä—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è
    all_subs = []
    all_values = []
    sphere_colors = {}
    cmap = plt.colormaps.get_cmap("tab20")

    for i, (sphere, subs) in enumerate(sliders.items()):
        subs_names = [s[0] for s in subs]
        vals = [s[1] for s in subs]
        all_subs.extend([(sphere, sub) for sub in subs_names])
        all_values.extend(vals)
        sphere_colors[sphere] = cmap(i / len(df.columns))

    N = len(all_subs)
    theta = np.linspace(0.0, 2 * np.pi, N, endpoint=False)
    width = 2 * np.pi / N

    fig, ax = plt.subplots(figsize=(12, 12), subplot_kw=dict(polar=True))
    bars = ax.bar(theta, all_values, width=width, align="edge")

    # –†–∞—Å–∫—Ä–∞—Å–∫–∞ –ø–æ —Å—Ñ–µ—Ä–∞–º
    for bar, (sphere, sub) in zip(bars, all_subs):
        bar.set_facecolor(sphere_colors[sphere])
        bar.set_alpha(0.7)

    # –ü–æ–¥–ø–∏—Å–∏ –ø–æ–¥—Å—Ñ–µ—Ä
    for angle, (sphere, sub), val in zip(theta, all_subs, all_values):
        rotation = np.degrees(angle + width / 2)
        alignment = "left" if np.pi/2 < angle < 3*np.pi/2 else "right"
        ax.text(
            angle + width / 2, 6.5, sub,
            ha=alignment, va="center",
            rotation=rotation, rotation_mode="anchor",
            fontsize=8
        )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
    ax.set_ylim(0, 6)
    ax.set_xticks([])
    ax.set_yticks(range(1, 7))
    ax.set_yticklabels(map(str, range(1, 7)))
    ax.set_title("–ö–æ–ª–µ—Å–æ –ñ–∏–∑–Ω–∏", fontsize=18, pad=20)

    # –õ–µ–≥–µ–Ω–¥–∞ –¥–ª—è —Å—Ñ–µ—Ä
    handles = [
        plt.Rectangle((0, 0), 1, 1, color=sphere_colors[s], alpha=0.7)
        for s in df.columns
    ]
    ax.legend(handles, df.columns, bbox_to_anchor=(1.15, 1.05))

    st.pyplot(fig)